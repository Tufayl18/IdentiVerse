{
  "language": "Solidity",
  "sources": {
    "contracts/IdentiFi.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nerror IdentiFi__UsernameExists();\nerror IdentiFi__NonExistingUser();\n\ncontract IdentiFi {\n    struct User {\n        BasicInfo basicInfo;\n        SocialLinks socialLinks;\n        ProfessionalInfo professionalInfo;\n        Visibility visibility;\n        bool exist;\n        uint[] appliedJob;\n    }\n\n    struct BasicInfo {\n        string firstName;\n        string lastName;\n        string email;\n        string homeAddress;\n        string phoneNumber;\n        string dateOfBirth;\n    }\n\n    struct SocialLinks {\n        string xProfile;\n        string instagramProfile;\n        string linkedinProfile;\n    }\n\n    struct ProfessionalInfo {\n        string education;\n        string workHistory;\n        string jobTitle;\n        string userDescription;\n        string[] skills;\n        string imageUrl;\n    }\n\n    struct Visibility {\n        bool education;\n        bool workHistory;\n        bool phoneNumber;\n        bool homeAddress;\n        bool dateOfBirth;\n    }\n\n    mapping(string => User) private users;\n    mapping(address => string) private addressToUsername;\n    mapping(string => bool) private usernames;\n\n    modifier onlyUniqueUsername(string memory username) {\n        if (usernames[username]) {\n            revert IdentiFi__UsernameExists();\n        }\n\n        // require(!usernames[username], \"Username already taken\");\n        _;\n    }\n\n    modifier userExists(string memory username) {\n        if (!users[username].exist) {\n            revert IdentiFi__NonExistingUser();\n        }\n        // require(users[username].exist, \"User does not exist\");\n        _;\n    }\n\n    function createUser(\n        string memory username,\n        BasicInfo memory basicInfo,\n        ProfessionalInfo memory professionalInfo,\n        SocialLinks memory socialLinks,\n        Visibility memory visibility\n    ) public onlyUniqueUsername(username) {\n        User storage user = users[username];\n        user.basicInfo = basicInfo;\n        user.professionalInfo = professionalInfo;\n        user.socialLinks = socialLinks;\n        user.visibility = visibility;\n        user.exist = true;\n        usernames[username] = true;\n        addressToUsername[msg.sender] = username;\n        users[username] = user;\n    }\n\n    function editUser(\n        string memory username,\n        BasicInfo memory basicInfo,\n        ProfessionalInfo memory professionalInfo,\n        SocialLinks memory socialLinks,\n        Visibility memory visibility\n    ) public userExists(username) {\n        User storage user = users[username];\n        user.basicInfo = basicInfo;\n        user.professionalInfo = professionalInfo;\n        user.socialLinks = socialLinks;\n        user.visibility = visibility;\n    }\n\n    function getUserByUsername(\n        string memory username\n    )\n        public\n        view\n        userExists(username)\n        returns (\n            BasicInfo memory basicInfo,\n            ProfessionalInfo memory professionalInfo,\n            SocialLinks memory socialLinks,\n            Visibility memory visibility\n        )\n    {\n        User storage user = users[username];\n\n        basicInfo = user.basicInfo;\n        professionalInfo = user.professionalInfo;\n        socialLinks = user.socialLinks;\n        visibility = user.visibility;\n\n        return (basicInfo, professionalInfo, socialLinks, visibility);\n    }\n\n    function getUserByAddress(\n        address userAddress\n    )\n        public\n        view\n        returns (\n            BasicInfo memory basicInfo,\n            ProfessionalInfo memory professionalInfo,\n            SocialLinks memory socialLinks,\n            Visibility memory visibility\n        )\n    {\n        string memory username = addressToUsername[userAddress];\n        return getUserByUsername(username);\n    }\n\n    function getUsernameByAddress(address userAddress) public view returns (string memory) {\n        return addressToUsername[userAddress];\n    }\n\n    function setVisibiliy(\n        string memory username,\n        Visibility memory visibility\n    )\n        public\n        // bool education,\n        // bool workHistory,\n        // bool phoneNumber,\n        // bool homeAddress,\n        // bool dateOfBirth\n        userExists(username)\n    {\n        User storage user = users[username];\n        user.visibility = visibility;\n    }\n\n    function getVisibility(\n        string memory username\n    ) public view userExists(username) returns (Visibility memory visibility) {\n        return users[username].visibility;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}